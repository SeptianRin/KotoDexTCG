name: Android Release CI

# This workflow triggers on every push to the main branch
on:
  push:
    branches: [ "main" ]

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    # Grant write permissions to the job to allow it to create a release
    permissions:
      contents: write
    steps:
      # Step 1: Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up the Java Development Kit (JDK)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      # Step 3: Decode the keystore from secrets using a dedicated action for reliability
      - name: Decode Keystore
        id: decode_keystore
        uses: timheuer/base64-to-file@v1
        with:
          fileName: 'keystore.jks'
          encodedString: ${{ secrets.KEYSTORE }}

      # Step 4: Run unit test
      - name: Run Unit Tests
        run: ./gradlew test

      # Step 5: Run Instrumentation Tests (Requires an emulator)
      - name: Run Instrumentation Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 33
          target: google_apis 
          arch: x86_64  
          script: ./gradlew connectedCheck
          emulator-boot-timeout: 1800
          emulator-options: -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim -no-accel 

      # Step 5: Build the release APK
      - name: Build with Gradle
        env:
          # Pass the secrets to the Gradle build as environment variables
          # The keystore file path is now an output from the previous step
          KEYSTORE_FILE: ${{ steps.decode_keystore.outputs.filePath }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: ./gradlew assembleRelease

      # Step 6: Create a GitHub Release and upload the APK
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          # The release will be tagged with the current date and commit hash
          tag_name: release-${{ github.run_number }}-${{ github.sha }}
          name: "Release ${{ github.run_number }}"
          body: "Automated release of KotoDex TCG."
          # Use a wildcard to find the APK regardless of its exact name
          files: app/build/outputs/apk/release/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
